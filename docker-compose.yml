services:
  mysql:
    image: mysql:latest
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: ecommerce_db
      MYSQL_USER: appuser  
      MYSQL_PASSWORD: apppassword
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/scripts:/docker-entrypoint-initdb.d:ro
    networks:
      - app-net
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-prootpassword"]
      timeout: 20s
      retries: 10
      interval: 10s
      start_period: 30s

  app1:
    build:
      context: .
      dockerfile: app/Dockerfile
    environment:
      PORT: 3000
      DB_HOST: mysql
      DB_USER: appuser
      DB_PASSWORD: apppassword
      DB_NAME: ecommerce_db
      DB_PORT: 3306
      NODE_ENV: production
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - app-net
    restart: unless-stopped

  app2:
    build:
      context: .
      dockerfile: app/Dockerfile
    environment:
      PORT: 3000
      DB_HOST: mysql
      DB_USER: appuser
      DB_PASSWORD: apppassword
      DB_NAME: ecommerce_db
      DB_PORT: 3306
      NODE_ENV: production
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - app-net
    restart: unless-stopped

  app3:
    build:
      context: .
      dockerfile: app/Dockerfile
    environment:
      PORT: 3000
      DB_HOST: mysql
      DB_USER: appuser
      DB_PASSWORD: apppassword
      DB_NAME: ecommerce_db
      DB_PORT: 3306
      NODE_ENV: production
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - app-net
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    ports:
      - "8080:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - app1
      - app2
      - app3
    networks:
      - app-net
    restart: unless-stopped

networks:
  app-net:
    driver: bridge

volumes:
  mysql_data:
